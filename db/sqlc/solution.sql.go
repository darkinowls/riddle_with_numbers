// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: solution.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/sqlc-dev/pqtype"
)

const createSolution = `-- name: CreateSolution :one
INSERT INTO "solution" (condition, solution)
VALUES ($1, $2)
RETURNING id, condition, solution, created_at
`

type CreateSolutionParams struct {
	Condition json.RawMessage       `json:"condition"`
	Solution  pqtype.NullRawMessage `json:"solution"`
}

func (q *Queries) CreateSolution(ctx context.Context, arg CreateSolutionParams) (Solution, error) {
	row := q.db.QueryRowContext(ctx, createSolution, arg.Condition, arg.Solution)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.Condition,
		&i.Solution,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllSolutions = `-- name: DeleteAllSolutions :exec
TRUNCATE TABLE "solution" RESTART IDENTITY CASCADE
`

func (q *Queries) DeleteAllSolutions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSolutions)
	return err
}

const getSolution = `-- name: GetSolution :one
SELECT id, condition, solution, created_at
FROM "solution"
where id = $1
LIMIT 1
`

func (q *Queries) GetSolution(ctx context.Context, id int64) (Solution, error) {
	row := q.db.QueryRowContext(ctx, getSolution, id)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.Condition,
		&i.Solution,
		&i.CreatedAt,
	)
	return i, err
}

const getSolutionCount = `-- name: GetSolutionCount :one
SELECT COUNT(*)
FROM "solution"
`

func (q *Queries) GetSolutionCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSolutionCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
